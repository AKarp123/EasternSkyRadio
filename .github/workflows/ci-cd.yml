name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'



jobs:
  lint-backend:

    runs-on: ubuntu-latest


    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Set up bun"
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Run linter
        run: bun run lint
        working-directory: ./server
  lint-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Set up node"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      

      - name: "Install pnpm"
        run: "npm install -g pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm run lint
  backend-tests:
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: "mongodb://127.0.0.1:27017/easternSkyRadio_test?directConnection=true"
      EXP_SESSION_SECRET: "test_secret"
      TEST_MIGRATIONS: "false"
      ADMIN_PASSWORD: "test_password"
      FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
      FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
      FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    defaults:
      run:
        working-directory: ./server


    steps:
      - name: Checkout code
        uses: actions/checkout@v5


      - name: "Set up bun"
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test
  build-server:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: "Build Dockerfile"
        run: docker build -f ./server/Dockerfile -t esr-backend:latest .
  build-client:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Build Dockerfile"
        run: docker build -f ./client/Dockerfile -t esr-frontend:latest .
  push-dev-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs: [build-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ vars.DOCKER_USERNAME }}/esr-backend:dev-latest

  push-dev-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs: [build-client,]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ vars.DOCKER_USERNAME }}/esr-frontend:dev-latest

  push-prod-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ vars.DOCKER_USERNAME }}/esr-backend:latest

  push-prod-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ vars.DOCKER_USERNAME }}/esr-frontend:latest
